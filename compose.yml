services:
  db:
    container_name: postgres
    image: postgres:13.22
    environment:
      POSTGRES_USER: joelsng
      POSTGRES_PASSWORD: password
      POSTGRES_DB: testdb
      PGDATA: /data/postgres
    volumes:
      - db:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # frontend:
  #   build: ./frontend
  #   env_file:
  #     - .env
  #   environment:
  #     - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
  #     - NEXT_PUBLIC_BACKEND_OCR=${NEXT_PUBLIC_BACKEND_OCR}
  #     - NEXT_PUBLIC_BACKEND_STATUS=${NEXT_PUBLIC_BACKEND_STATUS}
  #     - NEXT_PUBLIC_BACKEND_EXTRACTION=${NEXT_PUBLIC_BACKEND_EXTRACTION}
  #     - NEXT_PUBLIC_BACKEND_STATUS_EXTRACTION=${NEXT_PUBLIC_BACKEND_STATUS_EXTRACTION}
  #   depends_on:
  #     - "backend"
  #   ports:
  #     - "3000:3000"

  ocr-service:
    build: ./ocrService
    env_file:
      - .env
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SPRING_CALLBACK_URL_OCR=${SPRING_CALLBACK_URL_OCR}
      - SPRING_CALLBACK_URL_EXTRACT=${SPRING_CALLBACK_URL_EXTRACT}
    ports:
    - "8000:8000"
    restart: unless-stopped

  backend:
    build: ./backend
    volumes:
      - ./ocr_upload:/ocr_upload
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"

volumes:
  db: